version: "3.3"

networks:
  net:
    driver: overlay
    attachable: true

volumes:
    prometheus: {}
    grafana: {}
    alertmanager: {}

configs:
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml
  grafana_datasources:
    file: ./grafana/datasources
  grafana_dashboards:
    file: ./grafana/dashboards
  grafana_swarmprom_dashboards:
    file: ./grafana/swarmprom_dashboards.yml
  alertmanager:
    file: ./alertmanager/conf/alertmanager.yml
  node_exporter:
    file: ./node-exporter/conf/docker-entrypoint.sh
  prometheus:
    file: ./prometheus/conf

services:
  cadvisor:
    image: google/cadvisor
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - net
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-f0rzar0ma}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana:/var/lib/grafana
    configs:
      - source: grafana_datasources
        target: /etc/grafana/provisioning/datasources/
      - source: grafana_dashboards
        target: /etc/grafana/dashboards/
      - source: grafana_swarmprom_dashboards
        target: /etc/grafana/provisioning/dashboards/
    deploy:
      mode: replicated
      replicas: 3
      #placement:
      #  constraints:
      #    - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    networks:
      - net
    # environment:
    #  - SLACK_URL=${SLACK_URL:-https://hooks.slack.com/services/TOKEN}
    #  - SLACK_CHANNEL=${SLACK_CHANNEL:-general}
    #  - SLACK_USER=${SLACK_USER:-alertmanager}
    configs:
      - source: alertmanager
        target: /etc/alertmanager/config.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  smtp:
    image: namshi/smtp
    ports:
     - "25:25"
    networks:
      - net
    environment:
     #  # MUST start with : e.g RELAY_NETWORKS: :192.168.0.0/24:10.0.0.0/16
     #  # if acting as a relay this or RELAY_DOMAINS must be filled out or incoming mail will be rejected
     #  RELAY_NETWORKS: :192.168.0.0/24
     #  # what domains should be accepted to forward to lower distance MX server.
     #  RELAY_DOMAINS: <domain1> : <domain2> : <domain3>
     #  # To act as a Gmail relay
     #  GMAIL_USER:
     #  GMAIL_PASSWORD:
     #  # For use with Amazon SES relay
     #  SES_USER:
     #  SES_PASSWORD:
     #  SES_REGION:
     #  # if provided will enable TLS support
     #  KEY_PATH:
     #  CERTIFICATE_PATH:
     #  # the outgoing mail hostname
      MAILNAME: alert.imolab.it
     #  # set this to any value to disable ipv6
     #  DISABLE_IPV6:
     # # Generic SMTP Relay
     # SMARTHOST_ADDRESS:
     # SMARTHOST_PORT:
     # SMARTHOST_USER:
     # SMARTHOST_PASSWORD:
     # SMARTHOST_ALIASES:
    deploy:
      mode: replicated
      replicas: 3
      #placement:
      #  constraints:
      #    - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  node-exporter:
    image: prom/node-exporter:latest
    networks:
      - net
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    configs:
      - source: node_exporter
        target: /etc/node-exporter/docker-entrypoint.sh
    entrypoint: /etc/node-exporter/docker-entrypoint.sh
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  prometheus:
    image: prom/prometheus:latest
    ports:
     - "9090:9090"
    networks:
      - net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=24h'
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
      - source: prometheus
        target: /etc/prometheus/
    entrypoint: /etc/prometheus/docker-entrypoint.sh
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 128M
